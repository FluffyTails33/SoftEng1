datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

//  This model will define the role of a user, i.e admin, customer, etc
model Role {
  id   Int    @id @default(autoincrement())
  name String @unique // A role should have a unique name. i.e admin, customer

  permissions Permission[] // A role can have many permissions
  users       User[] // A role can have many users
}

// 
model Permission {
  id   Int    @id @default(autoincrement())
  name String @unique // A permission should have a unique name. i.e create, read, update, delete, etc

  roles Role[] // A permission can have many roles
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  email          String    @unique
  emailVerified  DateTime?
  phoneNumber    String?
  hashedPassword String
  image          String?
  roleId         Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   Role?   @relation(fields: [roleId], references: [id]) // A user can have one role
  cart   Cart?   // A user can have one cart
  orders Order[] // A user can have many orders
  wallet Wallet? // A user can have one wallet

  @@index([roleId], name: "role_id")
}

model Cart {
  id     Int @id @default(autoincrement())
  userId Int // A cart is associated with a user

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[] // A cart can have many items
  users     User       @relation(fields: [userId], references: [id]) // A cart is only associated with one user

  @@unique([userId], name: "unique_user_id") // A user can only have one cart, reenforced by the unique constraint
  @@index([userId], name: "user_id")
}

model CartItem {
  id       Int @id @default(autoincrement())
  quantity Int

  cartId    Int
  productId Int

  product Product @relation(fields: [productId], references: [id]) // A cart item is associated with a product
  cart    Cart    @relation(fields: [cartId], references: [id]) // A cart item is associated with a cart

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId], name: "cart_items_cart_id")
  @@index([productId], name: "cart_items_product_id")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique(map: "unique_category_name")

  products Product[] // A category can have many products

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name], name: "unique_category_name") // A category should have a unique name
}

// Categories might be associated with different types, i.e drinks and foods product have similar categories, but overall have different properties associated with them, not important for now 

// This model will represent the overall order of a user and its information
model Order {
  id            Int     @id @default(autoincrement())
  userId        Int
  orderStatus   String
  paymentMethod String?
  transactionId String?
  // shippingAddress String?
  totalAmount   Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transaction Transaction?
  isPaid      Boolean      @default(false)

  orderItems OrderItem[] // An order can have many items
  user       User        @relation(fields: [userId], references: [id]) // An order is associated with a user

  @@index([userId], name: "user_id")
}

// This model will represent each individual item in an order
model OrderItem {
  id        Int @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id]) // An order item is associated with a product
  order   Order   @relation(fields: [orderId], references: [id], map: "order_items_order_id") // An order item is associated with an order

  @@index([orderId], name: "order_items_order_id")
  @@index([productId], name: "order_items_product_id")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images     Image[]
  inventory  Inventory[]
  cartItems  CartItem[] // A product can have many cart items
  orderItems OrderItem[] // A product can have many order items
  category   Category?   @relation(fields: [categoryId], references: [id]) // A product is associated with a category
  categoryId Int? // Foreign Key

  @@index([categoryId])
}

// This model will represent the images associated with a product
model Image {
  id        Int     @id @default(autoincrement())
  url       String  @unique(map: "unique_image_url")
  productId Int
  product   Product @relation(fields: [productId], references: [id], map: "image_product_id") // An image is associated with a product

  @@index([productId], name: "image_product_id")
}

model Inventory {
  id Int @id @default(autoincrement())

  productId Int // Foreign Key

  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], map: "inventory_product_id") // An inventory is associated with a product

  @@index([productId], name: "inventory_product_id")
}

// This model will represent the transaction associated with an order
model Transaction {
  id                Int     @id @default(autoincrement())
  transactionId     String
  orderId           Int
  totalAmount       Float
  transactionStatus String
  paymentMethod     String?

  order Order @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId], name: "unique_order_id")
  @@index([orderId], name: "order_id")
}

model Wallet {
  id        Int     @id @default(autoincrement())
  userId    Int
  balance   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId], name: "unique_user_id")
  @@index([userId], name: "user_id")
}